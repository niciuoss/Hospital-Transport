using HospitalTransport.Domain.Enums;
using System;
using System.Collections.Generic;
using System.Linq;
using HospitalTransport.Application.Interfaces;
using HospitalTransport.Domain.Entities;
using QuestPDF.Fluent;
using QuestPDF.Helpers;
using QuestPDF.Infrastructure;
using System.IO;
using System.Reflection; // Necessário caso queira tentar a Solução 2 novamente

namespace HospitalTransport.Infrastructure.Services
{
    public class PdfService : IPdfService
    {
        public PdfService()
        {
            QuestPDF.Settings.License = LicenseType.Community;
        }

        public byte[] GenerateAppointmentTicket(Appointment appointment)
        {
            var document = Document.Create(container =>
            {
                container.Page(page =>
                {
                    page.Size(PageSizes.A4.Landscape());

                    // CORREÇÃO APLICADA AQUI
                    page.Margin(1, 0.5f, Unit.Centimetre); // 1cm horizontal, 0.5cm vertical

                    page.PageColor(Colors.White);
                    page.DefaultTextStyle(x => x.FontSize(10).FontFamily("Arial"));

                    page.Content().Row(row =>
                    {
                        row.RelativeItem().Element(container => ComposeSingleTicket(container, appointment));
                        row.ConstantItem(20).AlignCenter().LineVertical(1).LineColor(Colors.Grey.Lighten1);
                        row.RelativeItem().Element(container => ComposeSingleTicket(container, appointment));
                    });
                });
            });

            return document.GeneratePdf();
        }

        private void ComposeHeader(IContainer container)
        {
            // Usando a Solução 1 (arquivo na pasta do projeto API)
            var imagePath = "capa.png";
            if (File.Exists(imagePath))
            {
                container.Image(imagePath, ImageScaling.FitWidth);
            }
        }

        private void ComposeSingleTicket(IContainer container, Appointment appointment)
        {
            container.Column(column =>
            {
                // AJUSTE 2: Reduzido o espaçamento geral entre os itens de 12 para 8
                column.Spacing(8);

                column.Item().Element(ComposeHeader);
                
                ComposeDataSection(column, "DADOS DO PACIENTE", new List<(string, string)>
                {
                    ("Nome Completo:", appointment.Patient.FullName),
                    ("CPF:", FormatCPF(appointment.Patient.CPF)),
                    ("Cartão SUS:", appointment.Patient.SusCardNumber),
                    ("Data de Nascimento:", appointment.Patient.BirthDate.ToString("dd/MM/yyyy")),
                    ("Telefone:", appointment.Patient.PhoneNumber)
                });
                
                ComposeDataSection(column, "DADOS DO AGENDAMENTO", new List<(string, string)>
                {
                    ("Prontuário:", appointment.MedicalRecordNumber),
                    ("Hospital de Destino:", appointment.DestinationHospital),
                    ("Tipo de Tratamento:", GetTreatmentTypeDescription(appointment)),
                    ("Data da Viagem:", appointment.AppointmentDate.ToString("dd/MM/yyyy")),
                    ("Horário:", appointment.AppointmentDate.ToString("HH:mm")),
                    ("Poltrona:", appointment.SeatNumber.ToString("D2"))
                });
                
                column.Item()
                    .Border(1)
                    .BorderColor(Colors.Blue.Medium)
                    .Background(Colors.Blue.Lighten4)
                    .PaddingVertical(5)
                    .Column(col =>
                    {
                        // AJUSTE 3: Reduzido o espaçamento interno do box da poltrona
                        col.Spacing(2);
                        col.Item().AlignCenter().Text("SUA POLTRONA").FontSize(12).SemiBold();
                        col.Item().AlignCenter().Text(appointment.SeatNumber.ToString("D2"))
                            .FontSize(42).Bold().FontColor(Colors.Blue.Darken2);
                    });
                
                if (appointment.Companion != null)
                {
                    ComposeDataSection(column, "DADOS DO ACOMPANHANTE", new List<(string, string)>
                    {
                        ("Nome Completo:", appointment.Companion.FullName),
                        ("CPF:", FormatCPF(appointment.Companion.CPF)),
                        ("Cartão SUS:", appointment.Companion.SusCardNumber),
                        ("Poltrona:", appointment.CompanionSeatNumber?.ToString("D2") ?? "N/A")
                    });
                }
                
                column.Item().Element(ComposeInstructions);
            });
        }
        
        private void ComposeDataSection(ColumnDescriptor column, string title, List<(string label, string value)> items)
        {
            // AJUSTE 4: Removido o PaddingTop que havia antes do título da seção
            column.Item().Text(title).SemiBold().FontSize(11);
            column.Item().Grid(grid =>
            {
                grid.Columns(12); 

                foreach (var item in items)
                {
                    grid.Item(4).Text(item.label).SemiBold();
                    grid.Item(8).Text(item.value);
                }
            });
        }
        
        private void ComposeInstructions(IContainer container)
        {
            container.Border(1).BorderColor(Colors.Grey.Lighten1)
                .Padding(8)
                .Column(col =>
                {
                    col.Item().Text("INSTRUÇÕES IMPORTANTES:").FontSize(10).Bold();
                    col.Item().PaddingTop(2).Text("• Apresente este comprovante no dia da viagem;").FontSize(9);
                    col.Item().Text("• Chegue com 30 minutos de antecedência;").FontSize(9);
                    col.Item().Text("• Traga documento de identificação com foto;").FontSize(9);
                    col.Item().Text("• Em caso de imprevistos, entre em contato com o hospital.").FontSize(9);
                });
        }

        #region MÉTODOS INTOCADOS (PARA GeneratePassengerListPdf)
        
        public byte[] GeneratePassengerListPdf(List<Appointment> appointments, DateTime date)
        {
            // ... seu código original, sem modificações ...
            var document = Document.Create(container =>
            {
                container.Page(page =>
                {
                    page.Size(PageSizes.A4);
                    page.Margin(2, Unit.Centimetre);
                    page.PageColor(Colors.White);
                    page.DefaultTextStyle(x => x.FontSize(11).FontFamily("Arial"));

                    // Header
                    page.Header().Column(column =>
                    {
                        column.Item().AlignCenter().Text("HOSPITAL MUNICIPAL")
                            .FontSize(18).Bold().FontColor(Colors.Blue.Darken2);

                        column.Item().AlignCenter().Text("Lista de Passageiros")
                            .FontSize(14).FontColor(Colors.Grey.Darken1);

                        column.Item().AlignCenter().Text($"Data da Viagem: {date:dd/MM/yyyy}")
                            .FontSize(12).FontColor(Colors.Grey.Darken1);

                        column.Item().PaddingVertical(5).LineHorizontal(1).LineColor(Colors.Grey.Medium);
                    });

                    // Content
                    page.Content().Column(column =>
                    {
                        column.Spacing(10);

                        // ... o resto do seu método original ...
                        column.Item().Row(row =>
                        {
                            row.RelativeItem().Text($"Total de Passageiros: {CountTotalPassengers(appointments)}")
                                .FontSize(12).Bold();

                            row.RelativeItem().AlignRight().Text($"Gerado em: {DateTime.Now:dd/MM/yyyy HH:mm}")
                                .FontSize(10).FontColor(Colors.Grey.Darken1);
                        });

                        column.Item().PaddingVertical(5).LineHorizontal(1).LineColor(Colors.Grey.Medium);

                        column.Item().Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.ConstantColumn(50); // Poltrona
                                columns.RelativeColumn(3); // Nome
                                columns.RelativeColumn(2); // CPF
                                columns.ConstantColumn(80); // Tipo
                            });

                            // Header da tabela
                            table.Header(header =>
                            {
                                header.Cell().Background(Colors.Blue.Darken2).Padding(5)
                                    .Text("Poltrona").FontColor(Colors.White).Bold().FontSize(10);

                                header.Cell().Background(Colors.Blue.Darken2).Padding(5)
                                    .Text("Nome Completo").FontColor(Colors.White).Bold().FontSize(10);

                                header.Cell().Background(Colors.Blue.Darken2).Padding(5)
                                    .Text("CPF").FontColor(Colors.White).Bold().FontSize(10);

                                header.Cell().Background(Colors.Blue.Darken2).Padding(5)
                                    .Text("Tipo").FontColor(Colors.White).Bold().FontSize(10);
                            });

                            // Ordenar por poltrona
                            var sortedAppointments = appointments.OrderBy(a => a.SeatNumber).ToList();

                            foreach (var appointment in sortedAppointments)
                            {
                                // Linha do paciente
                                table.Cell().Border(1).BorderColor(Colors.Grey.Medium).Padding(5)
                                    .Text(appointment.SeatNumber.ToString("D2")).FontSize(10).Bold();

                                table.Cell().Border(1).BorderColor(Colors.Grey.Medium).Padding(5)
                                    .Text(appointment.Patient.FullName).FontSize(10);

                                table.Cell().Border(1).BorderColor(Colors.Grey.Medium).Padding(5)
                                    .Text(FormatCPF(appointment.Patient.CPF)).FontSize(10);

                                table.Cell().Border(1).BorderColor(Colors.Grey.Medium).Padding(5)
                                    .Text(appointment.IsPriority ? "Prioritário" : "Paciente").FontSize(9)
                                    .FontColor(appointment.IsPriority ? Colors.Red.Darken1 : Colors.Blue.Darken1);

                                // Linha do acompanhante (se houver)
                                if (appointment.Companion != null && appointment.CompanionSeatNumber.HasValue)
                                {
                                    table.Cell().Border(1).BorderColor(Colors.Grey.Medium).Padding(5)
                                        .Text(appointment.CompanionSeatNumber.Value.ToString("D2")).FontSize(10).Bold();

                                    table.Cell().Border(1).BorderColor(Colors.Grey.Medium).Padding(5)
                                        .Text(appointment.Companion.FullName).FontSize(10);

                                    table.Cell().Border(1).BorderColor(Colors.Grey.Medium).Padding(5)
                                        .Text(FormatCPF(appointment.Companion.CPF)).FontSize(10);

                                    table.Cell().Border(1).BorderColor(Colors.Grey.Medium).Padding(5)
                                        .Text("Acompanhante").FontSize(9).FontColor(Colors.Green.Darken1);
                                 }
                            }
                        });
                        
                        // Resumo
                        column.Item().PaddingTop(20).Border(1).BorderColor(Colors.Grey.Medium)
                            .Background(Colors.Grey.Lighten3).Padding(10).Column(col =>
                            {
                                col.Item().Text("RESUMO").FontSize(12).Bold();
                                col.Item().PaddingTop(5).Text($"Pacientes: {appointments.Count}").FontSize(10);
                                col.Item().Text($"Acompanhantes: {appointments.Count(a => a.Companion != null)}").FontSize(10);
                                col.Item().Text($"Total de Passageiros: {CountTotalPassengers(appointments)}").FontSize(10).Bold();
                                col.Item().Text($"Poltronas Prioritárias Ocupadas: {appointments.Count(a => a.IsPriority && a.SeatNumber <= 3)}").FontSize(10);
                            });
                    });

                    // Footer
                    page.Footer().AlignCenter().Text(text =>
                    {
                        text.Span("Documento gerado pelo Sistema de Transporte Hospitalar - ")
                            .FontSize(8).FontColor(Colors.Grey.Medium);
                        text.Span($"Página ").FontSize(8).FontColor(Colors.Grey.Medium);
                        text.CurrentPageNumber().FontSize(8).FontColor(Colors.Grey.Medium);
                    });
                });
            });

            return document.GeneratePdf();
        }

        private int CountTotalPassengers(List<Appointment> appointments)
        {
            return appointments.Count + appointments.Count(a => a.Companion != null);
        }

        private string FormatCPF(string cpf)
        {
            if (string.IsNullOrEmpty(cpf) || cpf.Length != 11)
                return cpf;
            
            return Convert.ToUInt64(cpf).ToString(@"000\.000\.000\-00");
        }

        private string GetTreatmentTypeDescription(Appointment appointment)
        {
            var description = appointment.TreatmentType.ToString();
            if (appointment.TreatmentType == Domain.Enums.TreatmentType.Outro &&
                !string.IsNullOrEmpty(appointment.TreatmentTypeOther))
            {
                description += $" - {appointment.TreatmentTypeOther}";
            }
            return description;
        }
        
        #endregion
    }
}